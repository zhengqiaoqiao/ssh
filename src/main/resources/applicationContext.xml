<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/jee  http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
	http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	
	<!-- 定义受环境影响易变的变量 -->
 	<context:property-placeholder location="classpath:config/application.properties" />
	
	<!-- c3p0 -->
	<bean id="dataSource" name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass"><value>${jdbc.driver}</value></property>
		<property name="jdbcUrl"><value>${jdbc.url}</value></property>
		<property name="user"><value>${jdbc.username}</value></property>
		<property name="password"><value>${jdbc.password}</value></property>
		<property name="minPoolSize"><value>${c3p0.minPoolSize}</value></property>
		<property name="maxPoolSize"><value>${c3p0.maxPoolSize}</value></property>
		<property name="initialPoolSize"><value>${c3p0.initialPoolSize}</value></property>
		<property name="maxIdleTime"><value>${c3p0.maxIdleTime}</value></property>
		<property name="acquireIncrement"><value>${c3p0.acquireIncrement}</value></property>
		<property name="idleConnectionTestPeriod"><value>${c3p0.idleConnectionTestPeriod}</value></property>
		<property name="acquireRetryAttempts"><value>${c3p0.acquireRetryAttempts}</value></property>
		<property name="numHelperThreads"><value>${c3p0.numHelperThreads}</value></property>
		<property name="acquireRetryDelay"><value>${c3p0.acquireRetryDelay}</value></property>
		<property name="propertyCycle"><value>${c3p0.propertyCycle}</value></property>
	</bean>
	<!-- Hibernate配置 -->
	<bean id="sessionFactory"  name="sessionFactory"  class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean" >
		<property name="dataSource" ref="dataSource" />
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>
		<property name="hibernateProperties">
			<props>
			 	<!-- 数据库方言 -->  
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				
				<!-- 打印sql语句控制台 -->  
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.jdbc.fetch_size">${hibernate.fetch_size}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.batch_size}</prop>
				<prop key="hibernate.connection.release_mode">${hibernate.connection.release_mode}</prop>
			  	<!-- 生成数据表的策略 -->
			  	<!-- 可以配置 update，create等等，create每次都会删除表在重新创建表接口，update只会更新已有的表结构，但是不会创建表结构 -->  
                <prop key="hibernate.hbm2ddl.auto">update</prop>  
                
                <!-- 配置二级缓存 -->  
<!--                 是否缓存查询结果(条件查询时用)。可选值：true：缓存查询结果。false：不缓存查询结果 (注意查询还是要执行query.setCacheable(true))-->
                <prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
<!--                 否启用二级缓存。可选值：true：启用二级缓存。false：不使用二级缓存。 -->
                <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
                
                <!-- 配置ehcache缓存  -->  
                <prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>  
                <prop key="hibernate.cache.provider_configuration_file_resource_path">${hibernate.cache.provider_configuration_file_resource_path}</prop>  
				
				<!-- 配置 hibernate boolean型与 数据库 char(1) 的映射 after_statement  -->
				<prop key="query.substitutions">true 1,false 0</prop>
				
				<!-- 最优化二级缓存 -->
<!-- 				是否使用结构化的方式缓存对象。可选值：true：结构化方式缓存对象。false：不使用结构化的方式缓存对象。 -->
				<prop key="hibernate.cache.use_structured_entries">${hibernate.cache.use_structured_entries}</prop>
				
				<prop key="hibernate.search.autoregister_listeners">${hibernate.search.autoregister_listeners}</prop>

				<prop key="hibernate.current_session_context_class">thread</prop>
				
			</props>
		</property>
 		<!-- 使用注解配置hibernate 的关系映射，domain对象都放在com.qiao.model.pojo下面，其他包下面的实体不会扫描 使用注解@Entity-->  
		<property name="packagesToScan">
			<list> 
				<value>com.qiao.model.pojo</value>
			</list>
		</property>
	</bean>
	<!-- 使用Spring中的HibernateTemplate -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
       
	</bean>
	
	<!-- 使用Spring中的JDBC -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
	   <property name="dataSource">
	    <ref bean="dataSource" />
	   </property>
	</bean>
	
  	<!-- 配置事务管理器，使用spring管理事务，一般放在service层管理事务  -->  
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<!-- 使用注解配置事务，也可以使用表达式通配符 -->  
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	
	<!-- 使用xml表达式直接配置事务，不只用注解 -->  
<!-- 	<tx:advice id="txAdvice" transaction-manager="transactionManager"> -->
<!-- 		<tx:attributes> -->
<!-- 			<tx:method name="*"  propagation="REQUIRED" rollback-for="java.lang.Exception"/> -->
<!-- 		</tx:attributes> -->
<!-- 	</tx:advice> -->

	<!-- 事务AOP -->
<!-- 	<aop:config> -->
<!-- 		<aop:advisor pointcut="execution(* com.qiao.service.*.*(..))" advice-ref="txAdvice" /> -->
<!-- 	</aop:config> -->

<!-- jedis 连接池配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- 最大分配的对象数 -->
		<property name="maxTotal" value="${redis.maxTotal}" />
		<!-- 最大能够保持idel状态的对象数 -->
		<property name="maxIdle" value="${redis.maxIdle}" />
		<!-- 最小能够保持idel状态的对象数-->
		<property name="minIdle" value="${redis.minIdle}" />
		<!-- 当调用borrow Object方法时，是否进行有效性检查 -->
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
	</bean>
	
	<!-- 普通JedisPool -->
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg index="0" ref="jedisPoolConfig" />
		<constructor-arg index="1" value="${redis.host}" />
		<constructor-arg index="2" value="${redis.port}" />
		<constructor-arg index="3" value="${redis.timeout}" />
	</bean>
	
	<!-- 主JedisPool -->
	<bean id="jedisPoolMaster" class="redis.clients.jedis.JedisPool">
		<constructor-arg index="0" ref="jedisPoolConfig" />
		<constructor-arg index="1" value="${redis-master.host}" />
		<constructor-arg index="2" value="${redis-master.port}" />
		<constructor-arg index="3" value="${redis-master.timeout}" />
	</bean>
	
	<!-- Redis集群 -->
	<bean id="jedisCluster" class="redis.clients.jedis.JedisCluster">
		<constructor-arg index="0">
            <list>
<!--                 <bean class="redis.clients.jedis.HostAndPort"> -->
<!--                     <constructor-arg name="host" value="${redis-cluster-node1.host}" /> -->
<!--                     <constructor-arg name="port" value="${redis-cluster-node1.port}" /> -->
<!--                 </bean> -->
<!--                 <bean class="redis.clients.jedis.HostAndPort"> -->
<!--                     <constructor-arg name="host" value="${redis-cluster-node2.host}" /> -->
<!--                     <constructor-arg name="port" value="${redis-cluster-node2.port}" /> -->
<!--                 </bean> -->
<!--                 <bean class="redis.clients.jedis.HostAndPort"> -->
<!--                     <constructor-arg name="host" value="${redis-cluster-node3.host}" /> -->
<!--                     <constructor-arg name="port" value="${redis-cluster-node3.port}" /> -->
<!--                 </bean> -->
            </list>
        </constructor-arg>
	</bean>
</beans>